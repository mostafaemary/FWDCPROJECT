
first.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000032e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000382  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000382  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000074a  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005f3  00000000  00000000  00000b82  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000035f  00000000  00000000  00001175  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000078  00000000  00000000  000014d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000313  00000000  00000000  0000154c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000d2  00000000  00000000  0000185f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000028  00000000  00000000  00001931  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 80 01 	call	0x300	; 0x300 <main>
  64:	0c 94 95 01 	jmp	0x32a	; 0x32a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <DIO_init>:
//includes 
#include "DIO.h"
//global variables
//function definitions
DIO_ERROR DIO_init(vuint8_t portnumber,vuint8_t pinnumber, DIO_direction direction)
{
  6c:	cf 93       	push	r28
  6e:	df 93       	push	r29
  70:	00 d0       	rcall	.+0      	; 0x72 <DIO_init+0x6>
  72:	cd b7       	in	r28, 0x3d	; 61
  74:	de b7       	in	r29, 0x3e	; 62
  76:	89 83       	std	Y+1, r24	; 0x01
  78:	6a 83       	std	Y+2, r22	; 0x02
	switch(portnumber)
  7a:	89 81       	ldd	r24, Y+1	; 0x01
  7c:	82 34       	cpi	r24, 0x42	; 66
  7e:	61 f1       	breq	.+88     	; 0xd8 <DIO_init+0x6c>
  80:	18 f4       	brcc	.+6      	; 0x88 <DIO_init+0x1c>
  82:	81 34       	cpi	r24, 0x41	; 65
  84:	41 f0       	breq	.+16     	; 0x96 <DIO_init+0x2a>
  86:	89 c0       	rjmp	.+274    	; 0x19a <DIO_init+0x12e>
  88:	83 34       	cpi	r24, 0x43	; 67
  8a:	09 f4       	brne	.+2      	; 0x8e <DIO_init+0x22>
  8c:	46 c0       	rjmp	.+140    	; 0x11a <DIO_init+0xae>
  8e:	84 34       	cpi	r24, 0x44	; 68
  90:	09 f4       	brne	.+2      	; 0x94 <DIO_init+0x28>
  92:	63 c0       	rjmp	.+198    	; 0x15a <DIO_init+0xee>
  94:	82 c0       	rjmp	.+260    	; 0x19a <DIO_init+0x12e>
	{
		case PORT_A:
			if (direction == INPUT)
  96:	41 11       	cpse	r20, r1
  98:	0f c0       	rjmp	.+30     	; 0xb8 <DIO_init+0x4c>
			{
				DDRA &=~(1<<pinnumber);
  9a:	2a 81       	ldd	r18, Y+2	; 0x02
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <DIO_init+0x3a>
  a2:	88 0f       	add	r24, r24
  a4:	99 1f       	adc	r25, r25
  a6:	2a 95       	dec	r18
  a8:	e2 f7       	brpl	.-8      	; 0xa2 <DIO_init+0x36>
  aa:	80 95       	com	r24
  ac:	90 95       	com	r25
  ae:	9a b3       	in	r25, 0x1a	; 26
  b0:	89 23       	and	r24, r25
  b2:	8a bb       	out	0x1a, r24	; 26
				return OK;
  b4:	80 e0       	ldi	r24, 0x00	; 0
  b6:	7a c0       	rjmp	.+244    	; 0x1ac <DIO_init+0x140>
			}
			else if(direction == OUTPUT)
  b8:	41 30       	cpi	r20, 0x01	; 1
  ba:	09 f0       	breq	.+2      	; 0xbe <DIO_init+0x52>
  bc:	70 c0       	rjmp	.+224    	; 0x19e <DIO_init+0x132>
			{
				DDRA |=(1<<pinnumber);
  be:	2a 81       	ldd	r18, Y+2	; 0x02
  c0:	81 e0       	ldi	r24, 0x01	; 1
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	02 c0       	rjmp	.+4      	; 0xca <DIO_init+0x5e>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	2a 95       	dec	r18
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <DIO_init+0x5a>
  ce:	9a b3       	in	r25, 0x1a	; 26
  d0:	89 2b       	or	r24, r25
  d2:	8a bb       	out	0x1a, r24	; 26
				return OK;
  d4:	80 e0       	ldi	r24, 0x00	; 0
  d6:	6a c0       	rjmp	.+212    	; 0x1ac <DIO_init+0x140>
				return ERROR;
				//return error
			}
		break;
		case PORT_B:
		if (direction == INPUT)
  d8:	41 11       	cpse	r20, r1
  da:	0f c0       	rjmp	.+30     	; 0xfa <DIO_init+0x8e>
		{
			DDRB &=~(1<<pinnumber);
  dc:	2a 81       	ldd	r18, Y+2	; 0x02
  de:	81 e0       	ldi	r24, 0x01	; 1
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	02 c0       	rjmp	.+4      	; 0xe8 <DIO_init+0x7c>
  e4:	88 0f       	add	r24, r24
  e6:	99 1f       	adc	r25, r25
  e8:	2a 95       	dec	r18
  ea:	e2 f7       	brpl	.-8      	; 0xe4 <DIO_init+0x78>
  ec:	80 95       	com	r24
  ee:	90 95       	com	r25
  f0:	97 b3       	in	r25, 0x17	; 23
  f2:	89 23       	and	r24, r25
  f4:	87 bb       	out	0x17, r24	; 23
			return OK;
  f6:	80 e0       	ldi	r24, 0x00	; 0
  f8:	59 c0       	rjmp	.+178    	; 0x1ac <DIO_init+0x140>
		}
		else if(direction == OUTPUT)
  fa:	41 30       	cpi	r20, 0x01	; 1
  fc:	09 f0       	breq	.+2      	; 0x100 <DIO_init+0x94>
  fe:	51 c0       	rjmp	.+162    	; 0x1a2 <DIO_init+0x136>
		{
			DDRB |=(1<<pinnumber);
 100:	2a 81       	ldd	r18, Y+2	; 0x02
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <DIO_init+0xa0>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	2a 95       	dec	r18
 10e:	e2 f7       	brpl	.-8      	; 0x108 <DIO_init+0x9c>
 110:	97 b3       	in	r25, 0x17	; 23
 112:	89 2b       	or	r24, r25
 114:	87 bb       	out	0x17, r24	; 23
			return OK;
 116:	80 e0       	ldi	r24, 0x00	; 0
 118:	49 c0       	rjmp	.+146    	; 0x1ac <DIO_init+0x140>
			return ERROR;
			//return error
		}
		break;
		case PORT_C:
		if (direction == INPUT)
 11a:	41 11       	cpse	r20, r1
 11c:	0f c0       	rjmp	.+30     	; 0x13c <DIO_init+0xd0>
		{
			DDRC &=~(1<<pinnumber);
 11e:	2a 81       	ldd	r18, Y+2	; 0x02
 120:	81 e0       	ldi	r24, 0x01	; 1
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	02 c0       	rjmp	.+4      	; 0x12a <DIO_init+0xbe>
 126:	88 0f       	add	r24, r24
 128:	99 1f       	adc	r25, r25
 12a:	2a 95       	dec	r18
 12c:	e2 f7       	brpl	.-8      	; 0x126 <DIO_init+0xba>
 12e:	80 95       	com	r24
 130:	90 95       	com	r25
 132:	94 b3       	in	r25, 0x14	; 20
 134:	89 23       	and	r24, r25
 136:	84 bb       	out	0x14, r24	; 20
			return OK;
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	38 c0       	rjmp	.+112    	; 0x1ac <DIO_init+0x140>
		}
		else if(direction == OUTPUT)
 13c:	41 30       	cpi	r20, 0x01	; 1
 13e:	99 f5       	brne	.+102    	; 0x1a6 <DIO_init+0x13a>
		{
			DDRC |=(1<<pinnumber);
 140:	2a 81       	ldd	r18, Y+2	; 0x02
 142:	81 e0       	ldi	r24, 0x01	; 1
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	02 c0       	rjmp	.+4      	; 0x14c <DIO_init+0xe0>
 148:	88 0f       	add	r24, r24
 14a:	99 1f       	adc	r25, r25
 14c:	2a 95       	dec	r18
 14e:	e2 f7       	brpl	.-8      	; 0x148 <DIO_init+0xdc>
 150:	94 b3       	in	r25, 0x14	; 20
 152:	89 2b       	or	r24, r25
 154:	84 bb       	out	0x14, r24	; 20
			return OK;
 156:	80 e0       	ldi	r24, 0x00	; 0
 158:	29 c0       	rjmp	.+82     	; 0x1ac <DIO_init+0x140>
			return ERROR;
			//return error
		}
		break;
		case PORT_D:
		if (direction == INPUT)
 15a:	41 11       	cpse	r20, r1
 15c:	0f c0       	rjmp	.+30     	; 0x17c <DIO_init+0x110>
		{
			DDRD &=~(1<<pinnumber);
 15e:	2a 81       	ldd	r18, Y+2	; 0x02
 160:	81 e0       	ldi	r24, 0x01	; 1
 162:	90 e0       	ldi	r25, 0x00	; 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <DIO_init+0xfe>
 166:	88 0f       	add	r24, r24
 168:	99 1f       	adc	r25, r25
 16a:	2a 95       	dec	r18
 16c:	e2 f7       	brpl	.-8      	; 0x166 <DIO_init+0xfa>
 16e:	80 95       	com	r24
 170:	90 95       	com	r25
 172:	91 b3       	in	r25, 0x11	; 17
 174:	89 23       	and	r24, r25
 176:	81 bb       	out	0x11, r24	; 17
			return OK;
 178:	80 e0       	ldi	r24, 0x00	; 0
 17a:	18 c0       	rjmp	.+48     	; 0x1ac <DIO_init+0x140>
		}
		else if(direction == OUTPUT)
 17c:	41 30       	cpi	r20, 0x01	; 1
 17e:	a9 f4       	brne	.+42     	; 0x1aa <DIO_init+0x13e>
		{
			DDRD |=(1<<pinnumber);
 180:	2a 81       	ldd	r18, Y+2	; 0x02
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	90 e0       	ldi	r25, 0x00	; 0
 186:	02 c0       	rjmp	.+4      	; 0x18c <DIO_init+0x120>
 188:	88 0f       	add	r24, r24
 18a:	99 1f       	adc	r25, r25
 18c:	2a 95       	dec	r18
 18e:	e2 f7       	brpl	.-8      	; 0x188 <DIO_init+0x11c>
 190:	91 b3       	in	r25, 0x11	; 17
 192:	89 2b       	or	r24, r25
 194:	81 bb       	out	0x11, r24	; 17
			return OK;
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	09 c0       	rjmp	.+18     	; 0x1ac <DIO_init+0x140>
			return ERROR;
			//return error
		}
		break;
		default:
		return ERROR;
 19a:	81 e0       	ldi	r24, 0x01	; 1
 19c:	07 c0       	rjmp	.+14     	; 0x1ac <DIO_init+0x140>
				DDRA |=(1<<pinnumber);
				return OK;
			}
			else
			{
				return ERROR;
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	05 c0       	rjmp	.+10     	; 0x1ac <DIO_init+0x140>
			DDRB |=(1<<pinnumber);
			return OK;
		}
		else
		{
			return ERROR;
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	03 c0       	rjmp	.+6      	; 0x1ac <DIO_init+0x140>
			DDRC |=(1<<pinnumber);
			return OK;
		}
		else
		{
			return ERROR;
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	01 c0       	rjmp	.+2      	; 0x1ac <DIO_init+0x140>
			DDRD |=(1<<pinnumber);
			return OK;
		}
		else
		{
			return ERROR;
 1aa:	81 e0       	ldi	r24, 0x01	; 1
		break;
		default:
		return ERROR;
		break;
	}
}
 1ac:	0f 90       	pop	r0
 1ae:	0f 90       	pop	r0
 1b0:	df 91       	pop	r29
 1b2:	cf 91       	pop	r28
 1b4:	08 95       	ret

000001b6 <DIO_write>:
DIO_ERROR DIO_write(vuint8_t portnumber,vuint8_t pinnumber, DIO_value value)
{
 1b6:	cf 93       	push	r28
 1b8:	df 93       	push	r29
 1ba:	00 d0       	rcall	.+0      	; 0x1bc <DIO_write+0x6>
 1bc:	cd b7       	in	r28, 0x3d	; 61
 1be:	de b7       	in	r29, 0x3e	; 62
 1c0:	89 83       	std	Y+1, r24	; 0x01
 1c2:	6a 83       	std	Y+2, r22	; 0x02
		switch(portnumber)
 1c4:	89 81       	ldd	r24, Y+1	; 0x01
 1c6:	82 34       	cpi	r24, 0x42	; 66
 1c8:	61 f1       	breq	.+88     	; 0x222 <DIO_write+0x6c>
 1ca:	18 f4       	brcc	.+6      	; 0x1d2 <DIO_write+0x1c>
 1cc:	81 34       	cpi	r24, 0x41	; 65
 1ce:	41 f0       	breq	.+16     	; 0x1e0 <DIO_write+0x2a>
 1d0:	89 c0       	rjmp	.+274    	; 0x2e4 <DIO_write+0x12e>
 1d2:	83 34       	cpi	r24, 0x43	; 67
 1d4:	09 f4       	brne	.+2      	; 0x1d8 <DIO_write+0x22>
 1d6:	46 c0       	rjmp	.+140    	; 0x264 <DIO_write+0xae>
 1d8:	84 34       	cpi	r24, 0x44	; 68
 1da:	09 f4       	brne	.+2      	; 0x1de <DIO_write+0x28>
 1dc:	63 c0       	rjmp	.+198    	; 0x2a4 <DIO_write+0xee>
 1de:	82 c0       	rjmp	.+260    	; 0x2e4 <DIO_write+0x12e>
		{
			case PORT_A:
			if (value == LOW)
 1e0:	41 11       	cpse	r20, r1
 1e2:	0f c0       	rjmp	.+30     	; 0x202 <DIO_write+0x4c>
			{
				PORTA &=~(1<<pinnumber);
 1e4:	2a 81       	ldd	r18, Y+2	; 0x02
 1e6:	81 e0       	ldi	r24, 0x01	; 1
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	02 c0       	rjmp	.+4      	; 0x1f0 <DIO_write+0x3a>
 1ec:	88 0f       	add	r24, r24
 1ee:	99 1f       	adc	r25, r25
 1f0:	2a 95       	dec	r18
 1f2:	e2 f7       	brpl	.-8      	; 0x1ec <DIO_write+0x36>
 1f4:	80 95       	com	r24
 1f6:	90 95       	com	r25
 1f8:	9b b3       	in	r25, 0x1b	; 27
 1fa:	89 23       	and	r24, r25
 1fc:	8b bb       	out	0x1b, r24	; 27
				return OK;
 1fe:	80 e0       	ldi	r24, 0x00	; 0
 200:	7a c0       	rjmp	.+244    	; 0x2f6 <DIO_write+0x140>
			}
			else if(value == HIGH)
 202:	41 30       	cpi	r20, 0x01	; 1
 204:	09 f0       	breq	.+2      	; 0x208 <DIO_write+0x52>
 206:	70 c0       	rjmp	.+224    	; 0x2e8 <DIO_write+0x132>
			{
				PORTA |=(1<<pinnumber);
 208:	2a 81       	ldd	r18, Y+2	; 0x02
 20a:	81 e0       	ldi	r24, 0x01	; 1
 20c:	90 e0       	ldi	r25, 0x00	; 0
 20e:	02 c0       	rjmp	.+4      	; 0x214 <DIO_write+0x5e>
 210:	88 0f       	add	r24, r24
 212:	99 1f       	adc	r25, r25
 214:	2a 95       	dec	r18
 216:	e2 f7       	brpl	.-8      	; 0x210 <DIO_write+0x5a>
 218:	9b b3       	in	r25, 0x1b	; 27
 21a:	89 2b       	or	r24, r25
 21c:	8b bb       	out	0x1b, r24	; 27
				return OK;
 21e:	80 e0       	ldi	r24, 0x00	; 0
 220:	6a c0       	rjmp	.+212    	; 0x2f6 <DIO_write+0x140>
				return ERROR;
				//return error
			}
			break;
			case PORT_B:
			if (value == LOW)
 222:	41 11       	cpse	r20, r1
 224:	0f c0       	rjmp	.+30     	; 0x244 <DIO_write+0x8e>
			{
				PORTB &=~(1<<pinnumber);
 226:	2a 81       	ldd	r18, Y+2	; 0x02
 228:	81 e0       	ldi	r24, 0x01	; 1
 22a:	90 e0       	ldi	r25, 0x00	; 0
 22c:	02 c0       	rjmp	.+4      	; 0x232 <DIO_write+0x7c>
 22e:	88 0f       	add	r24, r24
 230:	99 1f       	adc	r25, r25
 232:	2a 95       	dec	r18
 234:	e2 f7       	brpl	.-8      	; 0x22e <DIO_write+0x78>
 236:	80 95       	com	r24
 238:	90 95       	com	r25
 23a:	98 b3       	in	r25, 0x18	; 24
 23c:	89 23       	and	r24, r25
 23e:	88 bb       	out	0x18, r24	; 24
				return OK;
 240:	80 e0       	ldi	r24, 0x00	; 0
 242:	59 c0       	rjmp	.+178    	; 0x2f6 <DIO_write+0x140>
			}
			else if(value == HIGH)
 244:	41 30       	cpi	r20, 0x01	; 1
 246:	09 f0       	breq	.+2      	; 0x24a <DIO_write+0x94>
 248:	51 c0       	rjmp	.+162    	; 0x2ec <DIO_write+0x136>
			{
				PORTB |=(1<<pinnumber);
 24a:	2a 81       	ldd	r18, Y+2	; 0x02
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xa0>
 252:	88 0f       	add	r24, r24
 254:	99 1f       	adc	r25, r25
 256:	2a 95       	dec	r18
 258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0x9c>
 25a:	98 b3       	in	r25, 0x18	; 24
 25c:	89 2b       	or	r24, r25
 25e:	88 bb       	out	0x18, r24	; 24
				return OK;
 260:	80 e0       	ldi	r24, 0x00	; 0
 262:	49 c0       	rjmp	.+146    	; 0x2f6 <DIO_write+0x140>
				return ERROR;
				//return error
			}
			break;
			case PORT_C:
			if (value == LOW)
 264:	41 11       	cpse	r20, r1
 266:	0f c0       	rjmp	.+30     	; 0x286 <DIO_write+0xd0>
			{
				PORTC &=~(1<<pinnumber);
 268:	2a 81       	ldd	r18, Y+2	; 0x02
 26a:	81 e0       	ldi	r24, 0x01	; 1
 26c:	90 e0       	ldi	r25, 0x00	; 0
 26e:	02 c0       	rjmp	.+4      	; 0x274 <DIO_write+0xbe>
 270:	88 0f       	add	r24, r24
 272:	99 1f       	adc	r25, r25
 274:	2a 95       	dec	r18
 276:	e2 f7       	brpl	.-8      	; 0x270 <DIO_write+0xba>
 278:	80 95       	com	r24
 27a:	90 95       	com	r25
 27c:	95 b3       	in	r25, 0x15	; 21
 27e:	89 23       	and	r24, r25
 280:	85 bb       	out	0x15, r24	; 21
				return OK;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	38 c0       	rjmp	.+112    	; 0x2f6 <DIO_write+0x140>
			}
			else if(value == HIGH)
 286:	41 30       	cpi	r20, 0x01	; 1
 288:	99 f5       	brne	.+102    	; 0x2f0 <DIO_write+0x13a>
			{
				PORTC |=(1<<pinnumber);
 28a:	2a 81       	ldd	r18, Y+2	; 0x02
 28c:	81 e0       	ldi	r24, 0x01	; 1
 28e:	90 e0       	ldi	r25, 0x00	; 0
 290:	02 c0       	rjmp	.+4      	; 0x296 <DIO_write+0xe0>
 292:	88 0f       	add	r24, r24
 294:	99 1f       	adc	r25, r25
 296:	2a 95       	dec	r18
 298:	e2 f7       	brpl	.-8      	; 0x292 <DIO_write+0xdc>
 29a:	95 b3       	in	r25, 0x15	; 21
 29c:	89 2b       	or	r24, r25
 29e:	85 bb       	out	0x15, r24	; 21
				return OK;
 2a0:	80 e0       	ldi	r24, 0x00	; 0
 2a2:	29 c0       	rjmp	.+82     	; 0x2f6 <DIO_write+0x140>
				return ERROR;
				//return error
			}
			break;
			case PORT_D:
			if (value == LOW)
 2a4:	41 11       	cpse	r20, r1
 2a6:	0f c0       	rjmp	.+30     	; 0x2c6 <DIO_write+0x110>
			{
				PORTD &=~(1<<pinnumber);
 2a8:	2a 81       	ldd	r18, Y+2	; 0x02
 2aa:	81 e0       	ldi	r24, 0x01	; 1
 2ac:	90 e0       	ldi	r25, 0x00	; 0
 2ae:	02 c0       	rjmp	.+4      	; 0x2b4 <DIO_write+0xfe>
 2b0:	88 0f       	add	r24, r24
 2b2:	99 1f       	adc	r25, r25
 2b4:	2a 95       	dec	r18
 2b6:	e2 f7       	brpl	.-8      	; 0x2b0 <DIO_write+0xfa>
 2b8:	80 95       	com	r24
 2ba:	90 95       	com	r25
 2bc:	92 b3       	in	r25, 0x12	; 18
 2be:	89 23       	and	r24, r25
 2c0:	82 bb       	out	0x12, r24	; 18
				return OK;
 2c2:	80 e0       	ldi	r24, 0x00	; 0
 2c4:	18 c0       	rjmp	.+48     	; 0x2f6 <DIO_write+0x140>
			}
			else if(value == HIGH)
 2c6:	41 30       	cpi	r20, 0x01	; 1
 2c8:	a9 f4       	brne	.+42     	; 0x2f4 <DIO_write+0x13e>
			{
				PORTD |=(1<<pinnumber);
 2ca:	2a 81       	ldd	r18, Y+2	; 0x02
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	02 c0       	rjmp	.+4      	; 0x2d6 <DIO_write+0x120>
 2d2:	88 0f       	add	r24, r24
 2d4:	99 1f       	adc	r25, r25
 2d6:	2a 95       	dec	r18
 2d8:	e2 f7       	brpl	.-8      	; 0x2d2 <DIO_write+0x11c>
 2da:	92 b3       	in	r25, 0x12	; 18
 2dc:	89 2b       	or	r24, r25
 2de:	82 bb       	out	0x12, r24	; 18
				return OK;
 2e0:	80 e0       	ldi	r24, 0x00	; 0
 2e2:	09 c0       	rjmp	.+18     	; 0x2f6 <DIO_write+0x140>
				return ERROR;
				//return error
			}
			break;
			default:
			return ERROR;
 2e4:	81 e0       	ldi	r24, 0x01	; 1
 2e6:	07 c0       	rjmp	.+14     	; 0x2f6 <DIO_write+0x140>
				PORTA |=(1<<pinnumber);
				return OK;
			}
			else
			{
				return ERROR;
 2e8:	81 e0       	ldi	r24, 0x01	; 1
 2ea:	05 c0       	rjmp	.+10     	; 0x2f6 <DIO_write+0x140>
				PORTB |=(1<<pinnumber);
				return OK;
			}
			else
			{
				return ERROR;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	03 c0       	rjmp	.+6      	; 0x2f6 <DIO_write+0x140>
				PORTC |=(1<<pinnumber);
				return OK;
			}
			else
			{
				return ERROR;
 2f0:	81 e0       	ldi	r24, 0x01	; 1
 2f2:	01 c0       	rjmp	.+2      	; 0x2f6 <DIO_write+0x140>
				PORTD |=(1<<pinnumber);
				return OK;
			}
			else
			{
				return ERROR;
 2f4:	81 e0       	ldi	r24, 0x01	; 1
			break;
			default:
			return ERROR;
			break;
		}
}
 2f6:	0f 90       	pop	r0
 2f8:	0f 90       	pop	r0
 2fa:	df 91       	pop	r29
 2fc:	cf 91       	pop	r28
 2fe:	08 95       	ret

00000300 <main>:
//#include <util/delay.h>
int main(void)
{
    /* Replace with your application code */
	//set pin 3 direction in port B to be output
	DIO_init(PORT_A,4,OUTPUT);
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	64 e0       	ldi	r22, 0x04	; 4
 304:	81 e4       	ldi	r24, 0x41	; 65
 306:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
	DIO_init(PORT_C,7,OUTPUT);
 30a:	41 e0       	ldi	r20, 0x01	; 1
 30c:	67 e0       	ldi	r22, 0x07	; 7
 30e:	83 e4       	ldi	r24, 0x43	; 67
 310:	0e 94 36 00 	call	0x6c	; 0x6c <DIO_init>
    while (1) 
    {
		//toggle pin 3 at port b
		DIO_write(PORT_A,4,HIGH);
 314:	41 e0       	ldi	r20, 0x01	; 1
 316:	64 e0       	ldi	r22, 0x04	; 4
 318:	81 e4       	ldi	r24, 0x41	; 65
 31a:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_write>
		DIO_write(PORT_C,7,LOW);
 31e:	40 e0       	ldi	r20, 0x00	; 0
 320:	67 e0       	ldi	r22, 0x07	; 7
 322:	83 e4       	ldi	r24, 0x43	; 67
 324:	0e 94 db 00 	call	0x1b6	; 0x1b6 <DIO_write>
 328:	f5 cf       	rjmp	.-22     	; 0x314 <main+0x14>

0000032a <_exit>:
 32a:	f8 94       	cli

0000032c <__stop_program>:
 32c:	ff cf       	rjmp	.-2      	; 0x32c <__stop_program>
